#!/bin/bash

# Script para subir ambiente completo de monitoramento
# Inclui: Prometheus, Alertmanager, Node Exporter, cAdvisor, Jaeger
# Nota: Grafana foi movido para reposit√≥rio de infraestrutura separado

set -e

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}======================================${NC}"
echo -e "${BLUE}  LabEnd - Monitoramento Completo     ${NC}"
echo -e "${BLUE}======================================${NC}"

# Fun√ß√£o para exibir ajuda
show_help() {
    echo "Uso: $0 [COMANDO]"
    echo ""
    echo "Comandos:"
    echo "  start     - Inicia o ambiente de monitoramento"
    echo "  stop      - Para o ambiente de monitoramento"
    echo "  restart   - Reinicia o ambiente de monitoramento"
    echo "  status    - Mostra status dos servi√ßos"
    echo "  logs      - Mostra logs dos servi√ßos"
    echo "  clean     - Remove containers e volumes"
    echo "  help      - Mostra esta ajuda"
    echo ""
    echo "Exemplos:"
    echo "  $0 start"
    echo "  $0 logs prometheus"
    echo "  $0 status"
}

# Fun√ß√£o para verificar se Docker est√° rodando
check_docker() {
    if ! docker info > /dev/null 2>&1; then
        echo -e "${RED}‚ùå Docker n√£o est√° rodando${NC}"
        exit 1
    fi
}

# Fun√ß√£o para verificar se Docker Compose est√° dispon√≠vel
check_docker_compose() {
    if ! docker-compose --version > /dev/null 2>&1; then
        echo -e "${RED}‚ùå Docker Compose n√£o est√° instalado${NC}"
        exit 1
    fi
}

# Fun√ß√£o para criar diret√≥rios necess√°rios
create_directories() {
    echo -e "${YELLOW}üìÅ Criando diret√≥rios necess√°rios...${NC}"
    
    mkdir -p monitoring/prometheus
    mkdir -p monitoring/alertmanager
    # Grafana foi movido para reposit√≥rio separado - n√£o criando diret√≥rios aqui
    
    echo -e "${GREEN}‚úÖ Diret√≥rios criados${NC}"
}

# Fun√ß√£o para verificar se arquivos de configura√ß√£o existem
check_config_files() {
    echo -e "${YELLOW}üìã Verificando arquivos de configura√ß√£o...${NC}"
    
    local files=(
        "docker/configs/prometheus/prometheus.yml"
        "docker/configs/prometheus/alerts.yml"
        "docker/configs/alertmanager/alertmanager.yml"
        "docker-compose.monitoring.yml"
        # Arquivos do Grafana foram movidos para reposit√≥rio separado
    )
    
    for file in "${files[@]}"; do
        if [ ! -f "$file" ]; then
            echo -e "${RED}‚ùå Arquivo n√£o encontrado: $file${NC}"
            exit 1
        fi
    done
    
    echo -e "${GREEN}‚úÖ Arquivos de configura√ß√£o OK${NC}"
}

# Fun√ß√£o para iniciar servi√ßos
start_services() {
    echo -e "${YELLOW}üöÄ Iniciando servi√ßos de monitoramento...${NC}"
    
    # Parar containers existentes
    cd .. && docker-compose -f docker-compose.monitoring.yml down > /dev/null 2>&1 || true
    
    # Remover volumes √≥rf√£os
    docker volume prune -f > /dev/null 2>&1 || true
    
    # Subir servi√ßos
    docker-compose -f docker-compose.monitoring.yml up -d
    
    echo -e "${GREEN}‚úÖ Servi√ßos iniciados${NC}"
}

# Fun√ß√£o para parar servi√ßos
stop_services() {
    echo -e "${YELLOW}üõë Parando servi√ßos de monitoramento...${NC}"
    
    docker-compose -f docker-compose.monitoring.yml down
    
    echo -e "${GREEN}‚úÖ Servi√ßos parados${NC}"
}

# Fun√ß√£o para mostrar status dos servi√ßos
show_status() {
    echo -e "${YELLOW}üìä Status dos servi√ßos:${NC}"
    
    docker-compose -f docker-compose.monitoring.yml ps
    
    echo ""
    echo -e "${BLUE}üåê URLs dos servi√ßos:${NC}"
    echo -e "  ${GREEN}Aplica√ß√£o LabEnd:${NC}     http://localhost:8080"
    echo -e "  ${GREEN}GraphQL Playground:${NC}   http://localhost:8080/graphql"
    echo -e "  ${GREEN}Prometheus:${NC}           http://localhost:9090"
    echo -e "  ${YELLOW}Grafana:${NC}              Reposit√≥rio separado - execute ../labend-infra/scripts/start-grafana.sh"
    echo -e "  ${GREEN}Alertmanager:${NC}         http://localhost:9093"
    echo -e "  ${GREEN}Node Exporter:${NC}        http://localhost:9100"
    echo -e "  ${GREEN}cAdvisor:${NC}             http://localhost:8081"
    echo -e "  ${GREEN}Jaeger:${NC}               http://localhost:16686"
    echo ""
    echo -e "${BLUE}üîç Endpoints de monitoramento:${NC}"
    echo -e "  ${GREEN}M√©tricas Prometheus:${NC}  http://localhost:8080/metrics"
    echo -e "  ${GREEN}pprof CPU:${NC}            http://localhost:8080/debug/pprof/profile"
    echo -e "  ${GREEN}pprof Heap:${NC}           http://localhost:8080/debug/pprof/heap"
    echo -e "  ${GREEN}pprof Goroutines:${NC}     http://localhost:8080/debug/pprof/goroutine"
    echo -e "  ${GREEN}Admin Goroutines:${NC}     http://localhost:8080/admin/monitoring/goroutines"
    echo -e "  ${GREEN}Admin Heap:${NC}           http://localhost:8080/admin/monitoring/heap"
    echo -e "  ${GREEN}Admin GC:${NC}             http://localhost:8080/admin/monitoring/gc"
    echo -e "  ${GREEN}Admin Races:${NC}          http://localhost:8080/admin/monitoring/races"
}

# Fun√ß√£o para mostrar logs
show_logs() {
    local service=$1
    
    if [ -z "$service" ]; then
        echo -e "${YELLOW}üìã Logs de todos os servi√ßos:${NC}"
        docker-compose -f docker-compose.monitoring.yml logs --tail=50 -f
    else
        echo -e "${YELLOW}üìã Logs do servi√ßo $service:${NC}"
        docker-compose -f docker-compose.monitoring.yml logs --tail=50 -f "$service"
    fi
}

# Fun√ß√£o para limpar ambiente
clean_environment() {
    echo -e "${YELLOW}üßπ Limpando ambiente...${NC}"
    
    # Parar e remover containers
    docker-compose -f docker-compose.monitoring.yml down -v --remove-orphans
    
    # Remover imagens n√£o utilizadas
    docker image prune -f
    
    # Remover volumes √≥rf√£os
    docker volume prune -f
    
    echo -e "${GREEN}‚úÖ Ambiente limpo${NC}"
}

# Fun√ß√£o para testar alertas
test_alerts() {
    echo -e "${YELLOW}üß™ Testando sistema de alertas...${NC}"
    
    # Testar endpoint de m√©tricas
    echo -e "${BLUE}Testando endpoint de m√©tricas...${NC}"
    curl -s http://localhost:8080/metrics | head -5
    
    # Testar endpoint de goroutines
    echo -e "${BLUE}Testando endpoint de goroutines...${NC}"
    curl -s http://localhost:8080/admin/monitoring/goroutines | jq .
    
    # Testar endpoint de heap
    echo -e "${BLUE}Testando endpoint de heap...${NC}"
    curl -s http://localhost:8080/admin/monitoring/heap | jq .
    
    echo -e "${GREEN}‚úÖ Testes completados${NC}"
}

# Fun√ß√£o para aguardar servi√ßos estarem prontos
wait_for_services() {
    echo -e "${YELLOW}‚è≥ Aguardando servi√ßos estarem prontos...${NC}"
    
    # Aguardar aplica√ß√£o
    until curl -s http://localhost:8080/health > /dev/null 2>&1; do
        echo -e "${BLUE}Aguardando aplica√ß√£o...${NC}"
        sleep 2
    done
    
    # Aguardar Prometheus
    until curl -s http://localhost:9090/-/ready > /dev/null 2>&1; do
        echo -e "${BLUE}Aguardando Prometheus...${NC}"
        sleep 2
    done
    
    # Grafana foi movido para reposit√≥rio separado
    echo -e "${YELLOW}Grafana est√° em reposit√≥rio separado - n√£o aguardando${NC}"
    
    echo -e "${GREEN}‚úÖ Servi√ßos prontos${NC}"
}

# Fun√ß√£o principal
main() {
    local command=${1:-help}
    
    case $command in
        start)
            check_docker
            check_docker_compose
            create_directories
            check_config_files
            start_services
            wait_for_services
            show_status
            echo ""
            echo -e "${GREEN}üéâ Ambiente de monitoramento iniciado com sucesso!${NC}"
            echo -e "${YELLOW}üìñ Para usar o Grafana, execute: ../labend-infra/scripts/start-grafana.sh${NC}"
            echo -e "${YELLOW}üìä Acesse o Prometheus em: http://localhost:9090${NC}"
            ;;
        stop)
            stop_services
            ;;
        restart)
            stop_services
            sleep 2
            start_services
            wait_for_services
            show_status
            ;;
        status)
            show_status
            ;;
        logs)
            show_logs $2
            ;;
        clean)
            clean_environment
            ;;
        test)
            test_alerts
            ;;
        help)
            show_help
            ;;
        *)
            echo -e "${RED}‚ùå Comando desconhecido: $command${NC}"
            show_help
            exit 1
            ;;
    esac
}

# Executar fun√ß√£o principal
main "$@" 