package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.76

import (
	"context"
	"fmt"
	"strconv"

	"github.com/rafaelcoelhox/labbend/internal/challenges"
	"github.com/rafaelcoelhox/labbend/internal/users"
)

// ID is the resolver for the id field.
func (r *challengeResolver) ID(ctx context.Context, obj *challenges.Challenge) (string, error) {
	return strconv.Itoa(int(obj.ID)), nil
}

// CreatedAt is the resolver for the createdAt field.
func (r *challengeResolver) CreatedAt(ctx context.Context, obj *challenges.Challenge) (string, error) {
	return obj.CreatedAt.Format("2006-01-02T15:04:05Z"), nil
}

// UpdatedAt is the resolver for the updatedAt field.
func (r *challengeResolver) UpdatedAt(ctx context.Context, obj *challenges.Challenge) (string, error) {
	return obj.UpdatedAt.Format("2006-01-02T15:04:05Z"), nil
}

// ID is the resolver for the id field.
func (r *challengeSubmissionResolver) ID(ctx context.Context, obj *challenges.ChallengeSubmission) (string, error) {
	return strconv.Itoa(int(obj.ID)), nil
}

// ChallengeID is the resolver for the challengeID field.
func (r *challengeSubmissionResolver) ChallengeID(ctx context.Context, obj *challenges.ChallengeSubmission) (string, error) {
	return strconv.Itoa(int(obj.ChallengeID)), nil
}

// UserID is the resolver for the userID field.
func (r *challengeSubmissionResolver) UserID(ctx context.Context, obj *challenges.ChallengeSubmission) (string, error) {
	return strconv.Itoa(int(obj.UserID)), nil
}

// CreatedAt is the resolver for the createdAt field.
func (r *challengeSubmissionResolver) CreatedAt(ctx context.Context, obj *challenges.ChallengeSubmission) (string, error) {
	return obj.CreatedAt.Format("2006-01-02T15:04:05Z"), nil
}

// ID is the resolver for the id field.
func (r *challengeVoteResolver) ID(ctx context.Context, obj *challenges.ChallengeVote) (string, error) {
	return strconv.Itoa(int(obj.ID)), nil
}

// SubmissionID is the resolver for the submissionID field.
func (r *challengeVoteResolver) SubmissionID(ctx context.Context, obj *challenges.ChallengeVote) (string, error) {
	return strconv.Itoa(int(obj.SubmissionID)), nil
}

// UserID is the resolver for the userID field.
func (r *challengeVoteResolver) UserID(ctx context.Context, obj *challenges.ChallengeVote) (string, error) {
	return strconv.Itoa(int(obj.UserID)), nil
}

// CreatedAt is the resolver for the createdAt field.
func (r *challengeVoteResolver) CreatedAt(ctx context.Context, obj *challenges.ChallengeVote) (string, error) {
	return obj.CreatedAt.Format("2006-01-02T15:04:05Z"), nil
}

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input users.CreateUserInput) (*users.GraphQLUser, error) {
	user, err := r.userService.CreateUser(ctx, input)
	if err != nil {
		return nil, err
	}

	totalXP, err := r.userService.GetUserTotalXP(ctx, user.ID)
	if err != nil {
		totalXP = 0 // Se não conseguir obter XP, default para 0
	}

	return &users.GraphQLUser{
		ID:        user.ID,
		Name:      user.Name,
		Email:     user.Email,
		TotalXP:   totalXP,
		CreatedAt: user.CreatedAt.Format("2006-01-02T15:04:05Z"),
		UpdatedAt: user.UpdatedAt.Format("2006-01-02T15:04:05Z"),
	}, nil
}

// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, id string, input users.UpdateUserInput) (*users.GraphQLUser, error) {
	userID, err := strconv.ParseUint(id, 10, 32)
	if err != nil {
		return nil, fmt.Errorf("invalid user ID: %v", err)
	}

	user, err := r.userService.UpdateUser(ctx, uint(userID), input)
	if err != nil {
		return nil, err
	}

	totalXP, err := r.userService.GetUserTotalXP(ctx, user.ID)
	if err != nil {
		totalXP = 0
	}

	return &users.GraphQLUser{
		ID:        user.ID,
		Name:      user.Name,
		Email:     user.Email,
		TotalXP:   totalXP,
		CreatedAt: user.CreatedAt.Format("2006-01-02T15:04:05Z"),
		UpdatedAt: user.UpdatedAt.Format("2006-01-02T15:04:05Z"),
	}, nil
}

// DeleteUser is the resolver for the deleteUser field.
func (r *mutationResolver) DeleteUser(ctx context.Context, id string) (bool, error) {
	userID, err := strconv.ParseUint(id, 10, 32)
	if err != nil {
		return false, fmt.Errorf("invalid user ID: %v", err)
	}

	err = r.userService.DeleteUser(ctx, uint(userID))
	if err != nil {
		return false, err
	}

	return true, nil
}

// CreateChallenge is the resolver for the createChallenge field.
func (r *mutationResolver) CreateChallenge(ctx context.Context, input challenges.CreateChallengeInput) (*challenges.Challenge, error) {
	return r.challengeService.CreateChallenge(ctx, input)
}

// SubmitChallenge is the resolver for the submitChallenge field.
func (r *mutationResolver) SubmitChallenge(ctx context.Context, input challenges.SubmitChallengeInput) (*challenges.ChallengeSubmission, error) {
	// Por enquanto, vamos simular um userID (em produção seria obtido do contexto de autenticação)
	userID := uint(1)

	return r.challengeService.SubmitChallenge(ctx, userID, input)
}

// VoteChallenge is the resolver for the voteChallenge field.
func (r *mutationResolver) VoteChallenge(ctx context.Context, input challenges.VoteChallengeInput) (*challenges.ChallengeVote, error) {
	// Por enquanto, vamos simular um userID (em produção seria obtido do contexto de autenticação)
	userID := uint(2)

	return r.challengeService.VoteOnSubmission(ctx, userID, input)
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id string) (*users.GraphQLUser, error) {
	userID, err := strconv.ParseUint(id, 10, 32)
	if err != nil {
		return nil, fmt.Errorf("invalid user ID: %v", err)
	}

	userWithXP, err := r.userService.GetUserWithXP(ctx, uint(userID))
	if err != nil {
		return nil, err
	}

	return &users.GraphQLUser{
		ID:        userWithXP.User.ID,
		Name:      userWithXP.User.Name,
		Email:     userWithXP.User.Email,
		TotalXP:   userWithXP.TotalXP,
		CreatedAt: userWithXP.User.CreatedAt.Format("2006-01-02T15:04:05Z"),
		UpdatedAt: userWithXP.User.UpdatedAt.Format("2006-01-02T15:04:05Z"),
	}, nil
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context, limit *int, offset *int) ([]*users.GraphQLUser, error) {
	l := 10
	if limit != nil && *limit > 0 {
		l = *limit
	}

	o := 0
	if offset != nil && *offset >= 0 {
		o = *offset
	}

	usersWithXP, err := r.userService.ListUsersWithXP(ctx, l, o)
	if err != nil {
		return nil, err
	}

	result := make([]*users.GraphQLUser, len(usersWithXP))
	for i, userWithXP := range usersWithXP {
		result[i] = &users.GraphQLUser{
			ID:        userWithXP.User.ID,
			Name:      userWithXP.User.Name,
			Email:     userWithXP.User.Email,
			TotalXP:   userWithXP.TotalXP,
			CreatedAt: userWithXP.User.CreatedAt.Format("2006-01-02T15:04:05Z"),
			UpdatedAt: userWithXP.User.UpdatedAt.Format("2006-01-02T15:04:05Z"),
		}
	}

	return result, nil
}

// UserXPHistory is the resolver for the userXPHistory field.
func (r *queryResolver) UserXPHistory(ctx context.Context, userID string) ([]*users.UserXP, error) {
	id, err := strconv.ParseUint(userID, 10, 32)
	if err != nil {
		return nil, fmt.Errorf("invalid user ID: %v", err)
	}

	return r.userService.GetUserXPHistory(ctx, uint(id))
}

// Challenge is the resolver for the challenge field.
func (r *queryResolver) Challenge(ctx context.Context, id string) (*challenges.Challenge, error) {
	challengeID, err := strconv.ParseUint(id, 10, 32)
	if err != nil {
		return nil, fmt.Errorf("invalid challenge ID: %v", err)
	}

	return r.challengeService.GetChallenge(ctx, uint(challengeID))
}

// Challenges is the resolver for the challenges field.
func (r *queryResolver) Challenges(ctx context.Context, limit *int, offset *int) ([]*challenges.Challenge, error) {
	l := 10
	if limit != nil && *limit > 0 {
		l = *limit
	}

	o := 0
	if offset != nil && *offset >= 0 {
		o = *offset
	}

	return r.challengeService.ListChallenges(ctx, l, o)
}

// ChallengeSubmissions is the resolver for the challengeSubmissions field.
func (r *queryResolver) ChallengeSubmissions(ctx context.Context, challengeID string) ([]*challenges.ChallengeSubmission, error) {
	id, err := strconv.ParseUint(challengeID, 10, 32)
	if err != nil {
		return nil, fmt.Errorf("invalid challenge ID: %v", err)
	}

	return r.challengeService.GetSubmissionsByChallengeID(ctx, uint(id))
}

// ChallengeVotes is the resolver for the challengeVotes field.
func (r *queryResolver) ChallengeVotes(ctx context.Context, submissionID string) ([]*challenges.ChallengeVote, error) {
	id, err := strconv.ParseUint(submissionID, 10, 32)
	if err != nil {
		return nil, fmt.Errorf("invalid submission ID: %v", err)
	}

	return r.challengeService.GetVotesBySubmissionID(ctx, uint(id))
}

// ID is the resolver for the id field.
func (r *userResolver) ID(ctx context.Context, obj *users.GraphQLUser) (string, error) {
	return strconv.Itoa(int(obj.ID)), nil
}

// ID is the resolver for the id field.
func (r *userXPResolver) ID(ctx context.Context, obj *users.UserXP) (string, error) {
	return strconv.Itoa(int(obj.ID)), nil
}

// UserID is the resolver for the userID field.
func (r *userXPResolver) UserID(ctx context.Context, obj *users.UserXP) (string, error) {
	return strconv.Itoa(int(obj.UserID)), nil
}

// CreatedAt is the resolver for the createdAt field.
func (r *userXPResolver) CreatedAt(ctx context.Context, obj *users.UserXP) (string, error) {
	return obj.CreatedAt.Format("2006-01-02T15:04:05Z"), nil
}

// Challenge returns ChallengeResolver implementation.
func (r *Resolver) Challenge() ChallengeResolver { return &challengeResolver{r} }

// ChallengeSubmission returns ChallengeSubmissionResolver implementation.
func (r *Resolver) ChallengeSubmission() ChallengeSubmissionResolver {
	return &challengeSubmissionResolver{r}
}

// ChallengeVote returns ChallengeVoteResolver implementation.
func (r *Resolver) ChallengeVote() ChallengeVoteResolver { return &challengeVoteResolver{r} }

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// User returns UserResolver implementation.
func (r *Resolver) User() UserResolver { return &userResolver{r} }

// UserXP returns UserXPResolver implementation.
func (r *Resolver) UserXP() UserXPResolver { return &userXPResolver{r} }

type challengeResolver struct{ *Resolver }
type challengeSubmissionResolver struct{ *Resolver }
type challengeVoteResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type userResolver struct{ *Resolver }
type userXPResolver struct{ *Resolver }
