// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/rafaelcoelhox/labbend/internal/notifications (interfaces: UserService)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	notifications "github.com/rafaelcoelhox/labbend/internal/notifications"
)

// MockNotificationsUserService is a mock of UserService interface.
type MockNotificationsUserService struct {
	ctrl     *gomock.Controller
	recorder *MockNotificationsUserServiceMockRecorder
}

// MockNotificationsUserServiceMockRecorder is the mock recorder for MockNotificationsUserService.
type MockNotificationsUserServiceMockRecorder struct {
	mock *MockNotificationsUserService
}

// NewMockNotificationsUserService creates a new mock instance.
func NewMockNotificationsUserService(ctrl *gomock.Controller) *MockNotificationsUserService {
	mock := &MockNotificationsUserService{ctrl: ctrl}
	mock.recorder = &MockNotificationsUserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotificationsUserService) EXPECT() *MockNotificationsUserServiceMockRecorder {
	return m.recorder
}

// GetUser mocks base method.
func (m *MockNotificationsUserService) GetUser(arg0 context.Context, arg1 uint) (*notifications.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0, arg1)
	ret0, _ := ret[0].(*notifications.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockNotificationsUserServiceMockRecorder) GetUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockNotificationsUserService)(nil).GetUser), arg0, arg1)
}
