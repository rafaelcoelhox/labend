// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/rafaelcoelhox/labbend/internal/notifications (interfaces: Repository)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	notifications "github.com/rafaelcoelhox/labbend/internal/notifications"
	gorm "gorm.io/gorm"
)

// MockNotificationsRepository is a mock of Repository interface.
type MockNotificationsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockNotificationsRepositoryMockRecorder
}

// MockNotificationsRepositoryMockRecorder is the mock recorder for MockNotificationsRepository.
type MockNotificationsRepositoryMockRecorder struct {
	mock *MockNotificationsRepository
}

// NewMockNotificationsRepository creates a new mock instance.
func NewMockNotificationsRepository(ctrl *gomock.Controller) *MockNotificationsRepository {
	mock := &MockNotificationsRepository{ctrl: ctrl}
	mock.recorder = &MockNotificationsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotificationsRepository) EXPECT() *MockNotificationsRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockNotificationsRepository) Create(arg0 context.Context, arg1 *notifications.Notifications) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockNotificationsRepositoryMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockNotificationsRepository)(nil).Create), arg0, arg1)
}

// CreateItem mocks base method.
func (m *MockNotificationsRepository) CreateItem(arg0 context.Context, arg1 *notifications.NotificationsItem) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateItem", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateItem indicates an expected call of CreateItem.
func (mr *MockNotificationsRepositoryMockRecorder) CreateItem(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateItem", reflect.TypeOf((*MockNotificationsRepository)(nil).CreateItem), arg0, arg1)
}

// CreateItemWithTx mocks base method.
func (m *MockNotificationsRepository) CreateItemWithTx(arg0 context.Context, arg1 *gorm.DB, arg2 *notifications.NotificationsItem) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateItemWithTx", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateItemWithTx indicates an expected call of CreateItemWithTx.
func (mr *MockNotificationsRepositoryMockRecorder) CreateItemWithTx(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateItemWithTx", reflect.TypeOf((*MockNotificationsRepository)(nil).CreateItemWithTx), arg0, arg1, arg2)
}

// CreateWithTx mocks base method.
func (m *MockNotificationsRepository) CreateWithTx(arg0 context.Context, arg1 *gorm.DB, arg2 *notifications.Notifications) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWithTx", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateWithTx indicates an expected call of CreateWithTx.
func (mr *MockNotificationsRepositoryMockRecorder) CreateWithTx(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWithTx", reflect.TypeOf((*MockNotificationsRepository)(nil).CreateWithTx), arg0, arg1, arg2)
}

// Delete mocks base method.
func (m *MockNotificationsRepository) Delete(arg0 context.Context, arg1 uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockNotificationsRepositoryMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockNotificationsRepository)(nil).Delete), arg0, arg1)
}

// DeleteWithTx mocks base method.
func (m *MockNotificationsRepository) DeleteWithTx(arg0 context.Context, arg1 *gorm.DB, arg2 uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWithTx", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteWithTx indicates an expected call of DeleteWithTx.
func (mr *MockNotificationsRepositoryMockRecorder) DeleteWithTx(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWithTx", reflect.TypeOf((*MockNotificationsRepository)(nil).DeleteWithTx), arg0, arg1, arg2)
}

// GetByID mocks base method.
func (m *MockNotificationsRepository) GetByID(arg0 context.Context, arg1 uint) (*notifications.Notifications, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", arg0, arg1)
	ret0, _ := ret[0].(*notifications.Notifications)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockNotificationsRepositoryMockRecorder) GetByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockNotificationsRepository)(nil).GetByID), arg0, arg1)
}

// GetByIDWithTx mocks base method.
func (m *MockNotificationsRepository) GetByIDWithTx(arg0 context.Context, arg1 *gorm.DB, arg2 uint) (*notifications.Notifications, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByIDWithTx", arg0, arg1, arg2)
	ret0, _ := ret[0].(*notifications.Notifications)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByIDWithTx indicates an expected call of GetByIDWithTx.
func (mr *MockNotificationsRepositoryMockRecorder) GetByIDWithTx(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByIDWithTx", reflect.TypeOf((*MockNotificationsRepository)(nil).GetByIDWithTx), arg0, arg1, arg2)
}

// GetByStatus mocks base method.
func (m *MockNotificationsRepository) GetByStatus(arg0 context.Context, arg1 string) ([]*notifications.Notifications, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByStatus", arg0, arg1)
	ret0, _ := ret[0].([]*notifications.Notifications)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByStatus indicates an expected call of GetByStatus.
func (mr *MockNotificationsRepositoryMockRecorder) GetByStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByStatus", reflect.TypeOf((*MockNotificationsRepository)(nil).GetByStatus), arg0, arg1)
}

// GetByUserID mocks base method.
func (m *MockNotificationsRepository) GetByUserID(arg0 context.Context, arg1 uint) ([]*notifications.Notifications, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUserID", arg0, arg1)
	ret0, _ := ret[0].([]*notifications.Notifications)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUserID indicates an expected call of GetByUserID.
func (mr *MockNotificationsRepositoryMockRecorder) GetByUserID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUserID", reflect.TypeOf((*MockNotificationsRepository)(nil).GetByUserID), arg0, arg1)
}

// GetItemsByID mocks base method.
func (m *MockNotificationsRepository) GetItemsByID(arg0 context.Context, arg1 uint) ([]*notifications.NotificationsItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItemsByID", arg0, arg1)
	ret0, _ := ret[0].([]*notifications.NotificationsItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItemsByID indicates an expected call of GetItemsByID.
func (mr *MockNotificationsRepositoryMockRecorder) GetItemsByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItemsByID", reflect.TypeOf((*MockNotificationsRepository)(nil).GetItemsByID), arg0, arg1)
}

// List mocks base method.
func (m *MockNotificationsRepository) List(arg0 context.Context, arg1, arg2 int) ([]*notifications.Notifications, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*notifications.Notifications)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockNotificationsRepositoryMockRecorder) List(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockNotificationsRepository)(nil).List), arg0, arg1, arg2)
}

// Update mocks base method.
func (m *MockNotificationsRepository) Update(arg0 context.Context, arg1 *notifications.Notifications) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockNotificationsRepositoryMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockNotificationsRepository)(nil).Update), arg0, arg1)
}

// UpdateWithTx mocks base method.
func (m *MockNotificationsRepository) UpdateWithTx(arg0 context.Context, arg1 *gorm.DB, arg2 *notifications.Notifications) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWithTx", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateWithTx indicates an expected call of UpdateWithTx.
func (mr *MockNotificationsRepositoryMockRecorder) UpdateWithTx(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWithTx", reflect.TypeOf((*MockNotificationsRepository)(nil).UpdateWithTx), arg0, arg1, arg2)
}
