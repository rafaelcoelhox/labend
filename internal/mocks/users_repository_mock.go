// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/rafaelcoelhox/labbend/internal/users (interfaces: Repository)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	users "github.com/rafaelcoelhox/labbend/internal/users"
)

// MockUsersRepository is a mock of Repository interface.
type MockUsersRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUsersRepositoryMockRecorder
}

// MockUsersRepositoryMockRecorder is the mock recorder for MockUsersRepository.
type MockUsersRepositoryMockRecorder struct {
	mock *MockUsersRepository
}

// NewMockUsersRepository creates a new mock instance.
func NewMockUsersRepository(ctrl *gomock.Controller) *MockUsersRepository {
	mock := &MockUsersRepository{ctrl: ctrl}
	mock.recorder = &MockUsersRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsersRepository) EXPECT() *MockUsersRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockUsersRepository) Create(arg0 context.Context, arg1 *users.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockUsersRepositoryMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUsersRepository)(nil).Create), arg0, arg1)
}

// CreateUserXP mocks base method.
func (m *MockUsersRepository) CreateUserXP(arg0 context.Context, arg1 *users.UserXP) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserXP", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUserXP indicates an expected call of CreateUserXP.
func (mr *MockUsersRepositoryMockRecorder) CreateUserXP(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserXP", reflect.TypeOf((*MockUsersRepository)(nil).CreateUserXP), arg0, arg1)
}

// Delete mocks base method.
func (m *MockUsersRepository) Delete(arg0 context.Context, arg1 uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockUsersRepositoryMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockUsersRepository)(nil).Delete), arg0, arg1)
}

// GetByEmail mocks base method.
func (m *MockUsersRepository) GetByEmail(arg0 context.Context, arg1 string) (*users.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByEmail", arg0, arg1)
	ret0, _ := ret[0].(*users.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByEmail indicates an expected call of GetByEmail.
func (mr *MockUsersRepositoryMockRecorder) GetByEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByEmail", reflect.TypeOf((*MockUsersRepository)(nil).GetByEmail), arg0, arg1)
}

// GetByID mocks base method.
func (m *MockUsersRepository) GetByID(arg0 context.Context, arg1 uint) (*users.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", arg0, arg1)
	ret0, _ := ret[0].(*users.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockUsersRepositoryMockRecorder) GetByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockUsersRepository)(nil).GetByID), arg0, arg1)
}

// GetMultipleUsersXP mocks base method.
func (m *MockUsersRepository) GetMultipleUsersXP(arg0 context.Context, arg1 []uint) (map[uint]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMultipleUsersXP", arg0, arg1)
	ret0, _ := ret[0].(map[uint]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMultipleUsersXP indicates an expected call of GetMultipleUsersXP.
func (mr *MockUsersRepositoryMockRecorder) GetMultipleUsersXP(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMultipleUsersXP", reflect.TypeOf((*MockUsersRepository)(nil).GetMultipleUsersXP), arg0, arg1)
}

// GetUserTotalXP mocks base method.
func (m *MockUsersRepository) GetUserTotalXP(arg0 context.Context, arg1 uint) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserTotalXP", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserTotalXP indicates an expected call of GetUserTotalXP.
func (mr *MockUsersRepositoryMockRecorder) GetUserTotalXP(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserTotalXP", reflect.TypeOf((*MockUsersRepository)(nil).GetUserTotalXP), arg0, arg1)
}

// GetUserXPHistory mocks base method.
func (m *MockUsersRepository) GetUserXPHistory(arg0 context.Context, arg1 uint) ([]*users.UserXP, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserXPHistory", arg0, arg1)
	ret0, _ := ret[0].([]*users.UserXP)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserXPHistory indicates an expected call of GetUserXPHistory.
func (mr *MockUsersRepositoryMockRecorder) GetUserXPHistory(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserXPHistory", reflect.TypeOf((*MockUsersRepository)(nil).GetUserXPHistory), arg0, arg1)
}

// GetUsersWithXP mocks base method.
func (m *MockUsersRepository) GetUsersWithXP(arg0 context.Context, arg1, arg2 int) ([]*users.UserWithXP, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsersWithXP", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*users.UserWithXP)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsersWithXP indicates an expected call of GetUsersWithXP.
func (mr *MockUsersRepositoryMockRecorder) GetUsersWithXP(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersWithXP", reflect.TypeOf((*MockUsersRepository)(nil).GetUsersWithXP), arg0, arg1, arg2)
}

// List mocks base method.
func (m *MockUsersRepository) List(arg0 context.Context, arg1, arg2 int) ([]*users.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*users.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockUsersRepositoryMockRecorder) List(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockUsersRepository)(nil).List), arg0, arg1, arg2)
}

// Update mocks base method.
func (m *MockUsersRepository) Update(arg0 context.Context, arg1 *users.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockUsersRepositoryMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUsersRepository)(nil).Update), arg0, arg1)
}
