// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/rafaelcoelhox/labbend/internal/challenges (interfaces: Repository)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	challenges "github.com/rafaelcoelhox/labbend/internal/challenges"
)

// MockChallengesRepository is a mock of Repository interface.
type MockChallengesRepository struct {
	ctrl     *gomock.Controller
	recorder *MockChallengesRepositoryMockRecorder
}

// MockChallengesRepositoryMockRecorder is the mock recorder for MockChallengesRepository.
type MockChallengesRepositoryMockRecorder struct {
	mock *MockChallengesRepository
}

// NewMockChallengesRepository creates a new mock instance.
func NewMockChallengesRepository(ctrl *gomock.Controller) *MockChallengesRepository {
	mock := &MockChallengesRepository{ctrl: ctrl}
	mock.recorder = &MockChallengesRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChallengesRepository) EXPECT() *MockChallengesRepositoryMockRecorder {
	return m.recorder
}

// CountVotesBySubmissionID mocks base method.
func (m *MockChallengesRepository) CountVotesBySubmissionID(arg0 context.Context, arg1 uint) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountVotesBySubmissionID", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountVotesBySubmissionID indicates an expected call of CountVotesBySubmissionID.
func (mr *MockChallengesRepositoryMockRecorder) CountVotesBySubmissionID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountVotesBySubmissionID", reflect.TypeOf((*MockChallengesRepository)(nil).CountVotesBySubmissionID), arg0, arg1)
}

// CreateChallenge mocks base method.
func (m *MockChallengesRepository) CreateChallenge(arg0 context.Context, arg1 *challenges.Challenge) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateChallenge", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateChallenge indicates an expected call of CreateChallenge.
func (mr *MockChallengesRepositoryMockRecorder) CreateChallenge(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChallenge", reflect.TypeOf((*MockChallengesRepository)(nil).CreateChallenge), arg0, arg1)
}

// CreateSubmission mocks base method.
func (m *MockChallengesRepository) CreateSubmission(arg0 context.Context, arg1 *challenges.ChallengeSubmission) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSubmission", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSubmission indicates an expected call of CreateSubmission.
func (mr *MockChallengesRepositoryMockRecorder) CreateSubmission(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSubmission", reflect.TypeOf((*MockChallengesRepository)(nil).CreateSubmission), arg0, arg1)
}

// CreateVote mocks base method.
func (m *MockChallengesRepository) CreateVote(arg0 context.Context, arg1 *challenges.ChallengeVote) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVote", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateVote indicates an expected call of CreateVote.
func (mr *MockChallengesRepositoryMockRecorder) CreateVote(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVote", reflect.TypeOf((*MockChallengesRepository)(nil).CreateVote), arg0, arg1)
}

// GetChallengeByID mocks base method.
func (m *MockChallengesRepository) GetChallengeByID(arg0 context.Context, arg1 uint) (*challenges.Challenge, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChallengeByID", arg0, arg1)
	ret0, _ := ret[0].(*challenges.Challenge)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChallengeByID indicates an expected call of GetChallengeByID.
func (mr *MockChallengesRepositoryMockRecorder) GetChallengeByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChallengeByID", reflect.TypeOf((*MockChallengesRepository)(nil).GetChallengeByID), arg0, arg1)
}

// GetSubmissionByID mocks base method.
func (m *MockChallengesRepository) GetSubmissionByID(arg0 context.Context, arg1 uint) (*challenges.ChallengeSubmission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubmissionByID", arg0, arg1)
	ret0, _ := ret[0].(*challenges.ChallengeSubmission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubmissionByID indicates an expected call of GetSubmissionByID.
func (mr *MockChallengesRepositoryMockRecorder) GetSubmissionByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubmissionByID", reflect.TypeOf((*MockChallengesRepository)(nil).GetSubmissionByID), arg0, arg1)
}

// GetSubmissionsByChallengeID mocks base method.
func (m *MockChallengesRepository) GetSubmissionsByChallengeID(arg0 context.Context, arg1 uint) ([]*challenges.ChallengeSubmission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubmissionsByChallengeID", arg0, arg1)
	ret0, _ := ret[0].([]*challenges.ChallengeSubmission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubmissionsByChallengeID indicates an expected call of GetSubmissionsByChallengeID.
func (mr *MockChallengesRepositoryMockRecorder) GetSubmissionsByChallengeID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubmissionsByChallengeID", reflect.TypeOf((*MockChallengesRepository)(nil).GetSubmissionsByChallengeID), arg0, arg1)
}

// GetVotesBySubmissionID mocks base method.
func (m *MockChallengesRepository) GetVotesBySubmissionID(arg0 context.Context, arg1 uint) ([]*challenges.ChallengeVote, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVotesBySubmissionID", arg0, arg1)
	ret0, _ := ret[0].([]*challenges.ChallengeVote)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVotesBySubmissionID indicates an expected call of GetVotesBySubmissionID.
func (mr *MockChallengesRepositoryMockRecorder) GetVotesBySubmissionID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVotesBySubmissionID", reflect.TypeOf((*MockChallengesRepository)(nil).GetVotesBySubmissionID), arg0, arg1)
}

// HasUserSubmitted mocks base method.
func (m *MockChallengesRepository) HasUserSubmitted(arg0 context.Context, arg1, arg2 uint) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasUserSubmitted", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasUserSubmitted indicates an expected call of HasUserSubmitted.
func (mr *MockChallengesRepositoryMockRecorder) HasUserSubmitted(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasUserSubmitted", reflect.TypeOf((*MockChallengesRepository)(nil).HasUserSubmitted), arg0, arg1, arg2)
}

// HasUserVoted mocks base method.
func (m *MockChallengesRepository) HasUserVoted(arg0 context.Context, arg1, arg2 uint) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasUserVoted", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasUserVoted indicates an expected call of HasUserVoted.
func (mr *MockChallengesRepositoryMockRecorder) HasUserVoted(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasUserVoted", reflect.TypeOf((*MockChallengesRepository)(nil).HasUserVoted), arg0, arg1, arg2)
}

// ListChallenges mocks base method.
func (m *MockChallengesRepository) ListChallenges(arg0 context.Context, arg1, arg2 int) ([]*challenges.Challenge, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListChallenges", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*challenges.Challenge)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListChallenges indicates an expected call of ListChallenges.
func (mr *MockChallengesRepositoryMockRecorder) ListChallenges(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListChallenges", reflect.TypeOf((*MockChallengesRepository)(nil).ListChallenges), arg0, arg1, arg2)
}

// UpdateSubmission mocks base method.
func (m *MockChallengesRepository) UpdateSubmission(arg0 context.Context, arg1 *challenges.ChallengeSubmission) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSubmission", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSubmission indicates an expected call of UpdateSubmission.
func (mr *MockChallengesRepositoryMockRecorder) UpdateSubmission(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSubmission", reflect.TypeOf((*MockChallengesRepository)(nil).UpdateSubmission), arg0, arg1)
}
