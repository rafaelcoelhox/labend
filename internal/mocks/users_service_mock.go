// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/rafaelcoelhox/labbend/internal/users (interfaces: Service)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	users "github.com/rafaelcoelhox/labbend/internal/users"
	gorm "gorm.io/gorm"
)

// MockUsersService is a mock of Service interface.
type MockUsersService struct {
	ctrl     *gomock.Controller
	recorder *MockUsersServiceMockRecorder
}

// MockUsersServiceMockRecorder is the mock recorder for MockUsersService.
type MockUsersServiceMockRecorder struct {
	mock *MockUsersService
}

// NewMockUsersService creates a new mock instance.
func NewMockUsersService(ctrl *gomock.Controller) *MockUsersService {
	mock := &MockUsersService{ctrl: ctrl}
	mock.recorder = &MockUsersServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsersService) EXPECT() *MockUsersServiceMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockUsersService) CreateUser(arg0 context.Context, arg1 users.CreateUserInput) (*users.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(*users.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUsersServiceMockRecorder) CreateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUsersService)(nil).CreateUser), arg0, arg1)
}

// DeleteUser mocks base method.
func (m *MockUsersService) DeleteUser(arg0 context.Context, arg1 uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockUsersServiceMockRecorder) DeleteUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockUsersService)(nil).DeleteUser), arg0, arg1)
}

// GetUser mocks base method.
func (m *MockUsersService) GetUser(arg0 context.Context, arg1 uint) (*users.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0, arg1)
	ret0, _ := ret[0].(*users.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockUsersServiceMockRecorder) GetUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockUsersService)(nil).GetUser), arg0, arg1)
}

// GetUserTotalXP mocks base method.
func (m *MockUsersService) GetUserTotalXP(arg0 context.Context, arg1 uint) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserTotalXP", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserTotalXP indicates an expected call of GetUserTotalXP.
func (mr *MockUsersServiceMockRecorder) GetUserTotalXP(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserTotalXP", reflect.TypeOf((*MockUsersService)(nil).GetUserTotalXP), arg0, arg1)
}

// GetUserWithXP mocks base method.
func (m *MockUsersService) GetUserWithXP(arg0 context.Context, arg1 uint) (*users.UserWithXP, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserWithXP", arg0, arg1)
	ret0, _ := ret[0].(*users.UserWithXP)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserWithXP indicates an expected call of GetUserWithXP.
func (mr *MockUsersServiceMockRecorder) GetUserWithXP(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserWithXP", reflect.TypeOf((*MockUsersService)(nil).GetUserWithXP), arg0, arg1)
}

// GetUserXPHistory mocks base method.
func (m *MockUsersService) GetUserXPHistory(arg0 context.Context, arg1 uint) ([]*users.UserXP, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserXPHistory", arg0, arg1)
	ret0, _ := ret[0].([]*users.UserXP)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserXPHistory indicates an expected call of GetUserXPHistory.
func (mr *MockUsersServiceMockRecorder) GetUserXPHistory(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserXPHistory", reflect.TypeOf((*MockUsersService)(nil).GetUserXPHistory), arg0, arg1)
}

// GiveUserXP mocks base method.
func (m *MockUsersService) GiveUserXP(arg0 context.Context, arg1 uint, arg2, arg3 string, arg4 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GiveUserXP", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// GiveUserXP indicates an expected call of GiveUserXP.
func (mr *MockUsersServiceMockRecorder) GiveUserXP(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GiveUserXP", reflect.TypeOf((*MockUsersService)(nil).GiveUserXP), arg0, arg1, arg2, arg3, arg4)
}

// GiveUserXPWithTx mocks base method.
func (m *MockUsersService) GiveUserXPWithTx(arg0 context.Context, arg1 *gorm.DB, arg2 uint, arg3, arg4 string, arg5 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GiveUserXPWithTx", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(error)
	return ret0
}

// GiveUserXPWithTx indicates an expected call of GiveUserXPWithTx.
func (mr *MockUsersServiceMockRecorder) GiveUserXPWithTx(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GiveUserXPWithTx", reflect.TypeOf((*MockUsersService)(nil).GiveUserXPWithTx), arg0, arg1, arg2, arg3, arg4, arg5)
}

// ListUsers mocks base method.
func (m *MockUsersService) ListUsers(arg0 context.Context, arg1, arg2 int) ([]*users.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsers", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*users.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUsers indicates an expected call of ListUsers.
func (mr *MockUsersServiceMockRecorder) ListUsers(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsers", reflect.TypeOf((*MockUsersService)(nil).ListUsers), arg0, arg1, arg2)
}

// ListUsersWithXP mocks base method.
func (m *MockUsersService) ListUsersWithXP(arg0 context.Context, arg1, arg2 int) ([]*users.UserWithXP, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsersWithXP", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*users.UserWithXP)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUsersWithXP indicates an expected call of ListUsersWithXP.
func (mr *MockUsersServiceMockRecorder) ListUsersWithXP(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsersWithXP", reflect.TypeOf((*MockUsersService)(nil).ListUsersWithXP), arg0, arg1, arg2)
}

// RemoveUserXP mocks base method.
func (m *MockUsersService) RemoveUserXP(arg0 context.Context, arg1 uint, arg2, arg3 string, arg4 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveUserXP", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveUserXP indicates an expected call of RemoveUserXP.
func (mr *MockUsersServiceMockRecorder) RemoveUserXP(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveUserXP", reflect.TypeOf((*MockUsersService)(nil).RemoveUserXP), arg0, arg1, arg2, arg3, arg4)
}

// RemoveUserXPWithTx mocks base method.
func (m *MockUsersService) RemoveUserXPWithTx(arg0 context.Context, arg1 *gorm.DB, arg2 uint, arg3, arg4 string, arg5 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveUserXPWithTx", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveUserXPWithTx indicates an expected call of RemoveUserXPWithTx.
func (mr *MockUsersServiceMockRecorder) RemoveUserXPWithTx(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveUserXPWithTx", reflect.TypeOf((*MockUsersService)(nil).RemoveUserXPWithTx), arg0, arg1, arg2, arg3, arg4, arg5)
}

// UpdateUser mocks base method.
func (m *MockUsersService) UpdateUser(arg0 context.Context, arg1 uint, arg2 users.UpdateUserInput) (*users.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", arg0, arg1, arg2)
	ret0, _ := ret[0].(*users.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockUsersServiceMockRecorder) UpdateUser(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockUsersService)(nil).UpdateUser), arg0, arg1, arg2)
}
