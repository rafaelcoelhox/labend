// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/rafaelcoelhox/labbend/internal/challenges (interfaces: UserService)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockChallengesUserService is a mock of UserService interface.
type MockChallengesUserService struct {
	ctrl     *gomock.Controller
	recorder *MockChallengesUserServiceMockRecorder
}

// MockChallengesUserServiceMockRecorder is the mock recorder for MockChallengesUserService.
type MockChallengesUserServiceMockRecorder struct {
	mock *MockChallengesUserService
}

// NewMockChallengesUserService creates a new mock instance.
func NewMockChallengesUserService(ctrl *gomock.Controller) *MockChallengesUserService {
	mock := &MockChallengesUserService{ctrl: ctrl}
	mock.recorder = &MockChallengesUserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChallengesUserService) EXPECT() *MockChallengesUserServiceMockRecorder {
	return m.recorder
}

// GiveUserXP mocks base method.
func (m *MockChallengesUserService) GiveUserXP(arg0 context.Context, arg1 uint, arg2, arg3 string, arg4 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GiveUserXP", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// GiveUserXP indicates an expected call of GiveUserXP.
func (mr *MockChallengesUserServiceMockRecorder) GiveUserXP(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GiveUserXP", reflect.TypeOf((*MockChallengesUserService)(nil).GiveUserXP), arg0, arg1, arg2, arg3, arg4)
}
