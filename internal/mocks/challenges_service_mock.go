// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/rafaelcoelhox/labbend/internal/challenges (interfaces: Service)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	challenges "github.com/rafaelcoelhox/labbend/internal/challenges"
)

// MockChallengesService is a mock of Service interface.
type MockChallengesService struct {
	ctrl     *gomock.Controller
	recorder *MockChallengesServiceMockRecorder
}

// MockChallengesServiceMockRecorder is the mock recorder for MockChallengesService.
type MockChallengesServiceMockRecorder struct {
	mock *MockChallengesService
}

// NewMockChallengesService creates a new mock instance.
func NewMockChallengesService(ctrl *gomock.Controller) *MockChallengesService {
	mock := &MockChallengesService{ctrl: ctrl}
	mock.recorder = &MockChallengesServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChallengesService) EXPECT() *MockChallengesServiceMockRecorder {
	return m.recorder
}

// CreateChallenge mocks base method.
func (m *MockChallengesService) CreateChallenge(arg0 context.Context, arg1 challenges.CreateChallengeInput) (*challenges.Challenge, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateChallenge", arg0, arg1)
	ret0, _ := ret[0].(*challenges.Challenge)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateChallenge indicates an expected call of CreateChallenge.
func (mr *MockChallengesServiceMockRecorder) CreateChallenge(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChallenge", reflect.TypeOf((*MockChallengesService)(nil).CreateChallenge), arg0, arg1)
}

// GetChallenge mocks base method.
func (m *MockChallengesService) GetChallenge(arg0 context.Context, arg1 uint) (*challenges.Challenge, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChallenge", arg0, arg1)
	ret0, _ := ret[0].(*challenges.Challenge)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChallenge indicates an expected call of GetChallenge.
func (mr *MockChallengesServiceMockRecorder) GetChallenge(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChallenge", reflect.TypeOf((*MockChallengesService)(nil).GetChallenge), arg0, arg1)
}

// GetSubmissionsByChallengeID mocks base method.
func (m *MockChallengesService) GetSubmissionsByChallengeID(arg0 context.Context, arg1 uint) ([]*challenges.ChallengeSubmission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubmissionsByChallengeID", arg0, arg1)
	ret0, _ := ret[0].([]*challenges.ChallengeSubmission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubmissionsByChallengeID indicates an expected call of GetSubmissionsByChallengeID.
func (mr *MockChallengesServiceMockRecorder) GetSubmissionsByChallengeID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubmissionsByChallengeID", reflect.TypeOf((*MockChallengesService)(nil).GetSubmissionsByChallengeID), arg0, arg1)
}

// GetVotesBySubmissionID mocks base method.
func (m *MockChallengesService) GetVotesBySubmissionID(arg0 context.Context, arg1 uint) ([]*challenges.ChallengeVote, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVotesBySubmissionID", arg0, arg1)
	ret0, _ := ret[0].([]*challenges.ChallengeVote)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVotesBySubmissionID indicates an expected call of GetVotesBySubmissionID.
func (mr *MockChallengesServiceMockRecorder) GetVotesBySubmissionID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVotesBySubmissionID", reflect.TypeOf((*MockChallengesService)(nil).GetVotesBySubmissionID), arg0, arg1)
}

// ListChallenges mocks base method.
func (m *MockChallengesService) ListChallenges(arg0 context.Context, arg1, arg2 int) ([]*challenges.Challenge, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListChallenges", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*challenges.Challenge)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListChallenges indicates an expected call of ListChallenges.
func (mr *MockChallengesServiceMockRecorder) ListChallenges(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListChallenges", reflect.TypeOf((*MockChallengesService)(nil).ListChallenges), arg0, arg1, arg2)
}

// SubmitChallenge mocks base method.
func (m *MockChallengesService) SubmitChallenge(arg0 context.Context, arg1 uint, arg2 challenges.SubmitChallengeInput) (*challenges.ChallengeSubmission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubmitChallenge", arg0, arg1, arg2)
	ret0, _ := ret[0].(*challenges.ChallengeSubmission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubmitChallenge indicates an expected call of SubmitChallenge.
func (mr *MockChallengesServiceMockRecorder) SubmitChallenge(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitChallenge", reflect.TypeOf((*MockChallengesService)(nil).SubmitChallenge), arg0, arg1, arg2)
}

// VoteOnSubmission mocks base method.
func (m *MockChallengesService) VoteOnSubmission(arg0 context.Context, arg1 uint, arg2 challenges.VoteChallengeInput) (*challenges.ChallengeVote, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VoteOnSubmission", arg0, arg1, arg2)
	ret0, _ := ret[0].(*challenges.ChallengeVote)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VoteOnSubmission indicates an expected call of VoteOnSubmission.
func (mr *MockChallengesServiceMockRecorder) VoteOnSubmission(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VoteOnSubmission", reflect.TypeOf((*MockChallengesService)(nil).VoteOnSubmission), arg0, arg1, arg2)
}
