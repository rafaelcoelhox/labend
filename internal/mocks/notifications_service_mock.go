// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/rafaelcoelhox/labbend/internal/notifications (interfaces: Service)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	notifications "github.com/rafaelcoelhox/labbend/internal/notifications"
	gorm "gorm.io/gorm"
)

// MockNotificationsService is a mock of Service interface.
type MockNotificationsService struct {
	ctrl     *gomock.Controller
	recorder *MockNotificationsServiceMockRecorder
}

// MockNotificationsServiceMockRecorder is the mock recorder for MockNotificationsService.
type MockNotificationsServiceMockRecorder struct {
	mock *MockNotificationsService
}

// NewMockNotificationsService creates a new mock instance.
func NewMockNotificationsService(ctrl *gomock.Controller) *MockNotificationsService {
	mock := &MockNotificationsService{ctrl: ctrl}
	mock.recorder = &MockNotificationsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotificationsService) EXPECT() *MockNotificationsServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockNotificationsService) Create(arg0 context.Context, arg1 notifications.CreateInput) (*notifications.Notifications, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*notifications.Notifications)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockNotificationsServiceMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockNotificationsService)(nil).Create), arg0, arg1)
}

// CreateItem mocks base method.
func (m *MockNotificationsService) CreateItem(arg0 context.Context, arg1 uint, arg2 notifications.CreateItemInput) (*notifications.NotificationsItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateItem", arg0, arg1, arg2)
	ret0, _ := ret[0].(*notifications.NotificationsItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateItem indicates an expected call of CreateItem.
func (mr *MockNotificationsServiceMockRecorder) CreateItem(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateItem", reflect.TypeOf((*MockNotificationsService)(nil).CreateItem), arg0, arg1, arg2)
}

// CreateWithTx mocks base method.
func (m *MockNotificationsService) CreateWithTx(arg0 context.Context, arg1 *gorm.DB, arg2 notifications.CreateInput) (*notifications.Notifications, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWithTx", arg0, arg1, arg2)
	ret0, _ := ret[0].(*notifications.Notifications)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWithTx indicates an expected call of CreateWithTx.
func (mr *MockNotificationsServiceMockRecorder) CreateWithTx(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWithTx", reflect.TypeOf((*MockNotificationsService)(nil).CreateWithTx), arg0, arg1, arg2)
}

// Delete mocks base method.
func (m *MockNotificationsService) Delete(arg0 context.Context, arg1 uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockNotificationsServiceMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockNotificationsService)(nil).Delete), arg0, arg1)
}

// GetByID mocks base method.
func (m *MockNotificationsService) GetByID(arg0 context.Context, arg1 uint) (*notifications.Notifications, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", arg0, arg1)
	ret0, _ := ret[0].(*notifications.Notifications)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockNotificationsServiceMockRecorder) GetByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockNotificationsService)(nil).GetByID), arg0, arg1)
}

// GetByUserID mocks base method.
func (m *MockNotificationsService) GetByUserID(arg0 context.Context, arg1 uint) ([]*notifications.Notifications, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUserID", arg0, arg1)
	ret0, _ := ret[0].([]*notifications.Notifications)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUserID indicates an expected call of GetByUserID.
func (mr *MockNotificationsServiceMockRecorder) GetByUserID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUserID", reflect.TypeOf((*MockNotificationsService)(nil).GetByUserID), arg0, arg1)
}

// GetItemsByID mocks base method.
func (m *MockNotificationsService) GetItemsByID(arg0 context.Context, arg1 uint) ([]*notifications.NotificationsItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItemsByID", arg0, arg1)
	ret0, _ := ret[0].([]*notifications.NotificationsItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItemsByID indicates an expected call of GetItemsByID.
func (mr *MockNotificationsServiceMockRecorder) GetItemsByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItemsByID", reflect.TypeOf((*MockNotificationsService)(nil).GetItemsByID), arg0, arg1)
}

// List mocks base method.
func (m *MockNotificationsService) List(arg0 context.Context, arg1, arg2 int) ([]*notifications.Notifications, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*notifications.Notifications)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockNotificationsServiceMockRecorder) List(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockNotificationsService)(nil).List), arg0, arg1, arg2)
}

// ProcessarLogica mocks base method.
func (m *MockNotificationsService) ProcessarLogica(arg0 context.Context, arg1 uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessarLogica", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessarLogica indicates an expected call of ProcessarLogica.
func (mr *MockNotificationsServiceMockRecorder) ProcessarLogica(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessarLogica", reflect.TypeOf((*MockNotificationsService)(nil).ProcessarLogica), arg0, arg1)
}

// ProcessarLogicaWithTx mocks base method.
func (m *MockNotificationsService) ProcessarLogicaWithTx(arg0 context.Context, arg1 *gorm.DB, arg2 uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessarLogicaWithTx", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessarLogicaWithTx indicates an expected call of ProcessarLogicaWithTx.
func (mr *MockNotificationsServiceMockRecorder) ProcessarLogicaWithTx(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessarLogicaWithTx", reflect.TypeOf((*MockNotificationsService)(nil).ProcessarLogicaWithTx), arg0, arg1, arg2)
}

// Update mocks base method.
func (m *MockNotificationsService) Update(arg0 context.Context, arg1 uint, arg2 notifications.UpdateInput) (*notifications.Notifications, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2)
	ret0, _ := ret[0].(*notifications.Notifications)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockNotificationsServiceMockRecorder) Update(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockNotificationsService)(nil).Update), arg0, arg1, arg2)
}
