// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/rafaelcoelhox/labbend/internal/notifications (interfaces: EventBus)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	eventbus "github.com/rafaelcoelhox/labbend/pkg/eventbus"
	gorm "gorm.io/gorm"
)

// MockNotificationsEventBus is a mock of EventBus interface.
type MockNotificationsEventBus struct {
	ctrl     *gomock.Controller
	recorder *MockNotificationsEventBusMockRecorder
}

// MockNotificationsEventBusMockRecorder is the mock recorder for MockNotificationsEventBus.
type MockNotificationsEventBusMockRecorder struct {
	mock *MockNotificationsEventBus
}

// NewMockNotificationsEventBus creates a new mock instance.
func NewMockNotificationsEventBus(ctrl *gomock.Controller) *MockNotificationsEventBus {
	mock := &MockNotificationsEventBus{ctrl: ctrl}
	mock.recorder = &MockNotificationsEventBusMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotificationsEventBus) EXPECT() *MockNotificationsEventBusMockRecorder {
	return m.recorder
}

// Publish mocks base method.
func (m *MockNotificationsEventBus) Publish(arg0 eventbus.Event) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Publish", arg0)
}

// Publish indicates an expected call of Publish.
func (mr *MockNotificationsEventBusMockRecorder) Publish(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockNotificationsEventBus)(nil).Publish), arg0)
}

// PublishWithTx mocks base method.
func (m *MockNotificationsEventBus) PublishWithTx(arg0 context.Context, arg1 *gorm.DB, arg2 eventbus.Event) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishWithTx", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishWithTx indicates an expected call of PublishWithTx.
func (mr *MockNotificationsEventBusMockRecorder) PublishWithTx(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishWithTx", reflect.TypeOf((*MockNotificationsEventBus)(nil).PublishWithTx), arg0, arg1, arg2)
}
