global:
  smtp_smarthost: 'localhost:587'
  smtp_from: 'alertmanager@labend.com'
  smtp_auth_username: 'alertmanager@labend.com'
  smtp_auth_password: 'password'

route:
  group_by: ['alertname', 'component']
  group_wait: 10s
  group_interval: 10s
  repeat_interval: 1h
  receiver: 'web.hook'
  routes:
    - match:
        severity: critical
      receiver: 'critical-alerts'
      group_wait: 5s
      repeat_interval: 15m
    - match:
        component: concurrency
      receiver: 'race-condition-alerts'
      group_wait: 0s
      repeat_interval: 5m
    - match:
        component: memory
      receiver: 'memory-leak-alerts'
      group_wait: 30s
      repeat_interval: 30m
    - match:
        component: goroutines
      receiver: 'goroutine-leak-alerts'
      group_wait: 30s
      repeat_interval: 30m

receivers:
  - name: 'web.hook'
    webhook_configs:
      - url: 'http://localhost:5001/alerts'
        send_resolved: true

  - name: 'critical-alerts'
    webhook_configs:
      - url: 'http://localhost:5001/critical'
        send_resolved: true
        title: 'LabEnd Critical Alert'
        text: |
          {{ range .Alerts }}
          Alert: {{ .Annotations.summary }}
          Description: {{ .Annotations.description }}
          Instance: {{ .Labels.instance }}
          Severity: {{ .Labels.severity }}
          Component: {{ .Labels.component }}
          {{ end }}
    email_configs:
      - to: 'admin@labend.com'
        subject: 'LabEnd Critical Alert - {{ .GroupLabels.alertname }}'
        body: |
          {{ range .Alerts }}
          Alert: {{ .Annotations.summary }}
          Description: {{ .Annotations.description }}
          Instance: {{ .Labels.instance }}
          Severity: {{ .Labels.severity }}
          Component: {{ .Labels.component }}
          Started: {{ .StartsAt }}
          {{ end }}

  - name: 'race-condition-alerts'
    webhook_configs:
      - url: 'http://localhost:5001/race-conditions'
        send_resolved: true
        title: 'LabEnd Race Condition Alert'
        text: |
          üö® RACE CONDITION DETECTED üö®
          
          {{ range .Alerts }}
          Alert: {{ .Annotations.summary }}
          Description: {{ .Annotations.description }}
          Instance: {{ .Labels.instance }}
          
          A√á√ÉO NECESS√ÅRIA:
          1. Verificar logs da aplica√ß√£o
          2. Analisar stack traces
          3. Revisar c√≥digo concorrente
          4. Executar testes de stress
          {{ end }}
    email_configs:
      - to: 'dev-team@labend.com'
        subject: 'üö® Race Condition Detected - {{ .GroupLabels.alertname }}'
        body: |
          RACE CONDITION ALERT
          
          {{ range .Alerts }}
          Alert: {{ .Annotations.summary }}
          Description: {{ .Annotations.description }}
          Instance: {{ .Labels.instance }}
          Started: {{ .StartsAt }}
          
          Debugging steps:
          1. Check application logs
          2. Review pprof data
          3. Run race detector: go run -race
          4. Analyze concurrent access patterns
          {{ end }}

  - name: 'memory-leak-alerts'
    webhook_configs:
      - url: 'http://localhost:5001/memory-leaks'
        send_resolved: true
        title: 'LabEnd Memory Leak Alert'
        text: |
          üíß MEMORY LEAK DETECTED üíß
          
          {{ range .Alerts }}
          Alert: {{ .Annotations.summary }}
          Description: {{ .Annotations.description }}
          Instance: {{ .Labels.instance }}
          
          A√á√ÉO NECESS√ÅRIA:
          1. Analisar heap dump
          2. Verificar goroutines ativas
          3. Revisar pools de conex√£o
          4. Executar profiling
          {{ end }}
    email_configs:
      - to: 'dev-team@labend.com'
        subject: 'üíß Memory Leak Detected - {{ .GroupLabels.alertname }}'
        body: |
          MEMORY LEAK ALERT
          
          {{ range .Alerts }}
          Alert: {{ .Annotations.summary }}
          Description: {{ .Annotations.description }}
          Instance: {{ .Labels.instance }}
          Started: {{ .StartsAt }}
          
          Debugging steps:
          1. Analyze heap dump: go tool pprof /debug/pprof/heap
          2. Check goroutine leaks: go tool pprof /debug/pprof/goroutine
          3. Review connection pools
          4. Check for unbounded channels
          {{ end }}

  - name: 'goroutine-leak-alerts'
    webhook_configs:
      - url: 'http://localhost:5001/goroutine-leaks'
        send_resolved: true
        title: 'LabEnd Goroutine Leak Alert'
        text: |
          üîÑ GOROUTINE LEAK DETECTED üîÑ
          
          {{ range .Alerts }}
          Alert: {{ .Annotations.summary }}
          Description: {{ .Annotations.description }}
          Instance: {{ .Labels.instance }}
          
          A√á√ÉO NECESS√ÅRIA:
          1. Analisar dump de goroutines
          2. Verificar channels bloqueados
          3. Revisar context cancellation
          4. Verificar defer statements
          {{ end }}
    email_configs:
      - to: 'dev-team@labend.com'
        subject: 'üîÑ Goroutine Leak Detected - {{ .GroupLabels.alertname }}'
        body: |
          GOROUTINE LEAK ALERT
          
          {{ range .Alerts }}
          Alert: {{ .Annotations.summary }}
          Description: {{ .Annotations.description }}
          Instance: {{ .Labels.instance }}
          Started: {{ .StartsAt }}
          
          Debugging steps:
          1. Analyze goroutine dump: go tool pprof /debug/pprof/goroutine
          2. Check for blocked channels
          3. Review context cancellation
          4. Look for missing defer statements
          5. Check for infinite loops
          {{ end }}

inhibit_rules:
  - source_match:
      severity: 'critical'
    target_match:
      severity: 'warning'
    equal: ['alertname', 'instance']

templates:
  - '/etc/alertmanager/templates/*.tmpl' 